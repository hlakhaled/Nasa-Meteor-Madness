/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 earth.gltf 
Author: PatelDev (https://sketchfab.com/PatelDev)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/earth-f7a76c63ff1846afb2d606e5c8369c15
Title: Earth
*/

import React, { useRef } from "react";
import { useGLTF } from "@react-three/drei";

function Earth({ onTargetSelect, selectedTarget }) {
  // const { nodes, materials } = useGLTF("/earth.gltf");
  const { nodes, materials } = useGLTF(`${import.meta.env.BASE_URL}earth.gltf`);
  const meshRef = useRef();

  const handleClick = (event) => {
    event.stopPropagation();
    const intersectionPoint = event.point;

    const x = intersectionPoint.x;
    const y = intersectionPoint.y;
    const z = intersectionPoint.z;

    // Normalize vector
    const length = Math.sqrt(x * x + y * y + z * z);
    const nx = x / length;
    const ny = y / length;
    const nz = z / length;

    // Latitude
    const lat = Math.asin(ny) * (180 / Math.PI);

    // Longitude (fixed axis order)
    let lon = Math.atan2(-nz, nx) * (180 / Math.PI);

    // Normalize longitude to [-180, 180]
    if (lon > 180) lon -= 360;
    if (lon < -180) lon += 360;

    // Default
    let region = "Ocean";

    // Polar regions
    if (lat > 66) {
      region = "Arctic";
    } else if (lat < -60) {
      region = "Antarctica";
    }
    // North America
    else if (lon >= -170 && lon <= -50 && lat >= 15 && lat <= 72) {
      region = "North America";
    }
    // South America
    else if (lon >= -82 && lon <= -34 && lat >= -56 && lat <= 13) {
      region = "South America";
    }
    // Europe
    else if (lon >= -10 && lon <= 40 && lat >= 36 && lat <= 71) {
      region = "Europe";
    }
    // Africa
    else if (lon >= -18 && lon <= 52 && lat >= -35 && lat <= 37) {
      region = "Africa";
    }
    // Asia
    else if (
      ((lon >= 26 && lon <= 180) || (lon >= -180 && lon <= -170)) &&
      lat >= -10 &&
      lat <= 77
    ) {
      region = "Asia";
    }
    // Australia
    else if (lon >= 113 && lon <= 154 && lat >= -44 && lat <= -10) {
      region = "Australia";
    }

    console.log(
      `Clicked - Lat: ${lat.toFixed(2)}, Lon: ${lon.toFixed(
        2
      )}, Region: ${region}`
    );

    onTargetSelect({
      position: intersectionPoint,
      lat: lat.toFixed(2),
      lon: lon.toFixed(2),
      region,
    });
  };

  return (
    <group dispose={null}>
      <mesh
        ref={meshRef}
        geometry={nodes.Object_4.geometry}
        material={materials["Scene_-_Root"]}
        scale={1.128}
        onClick={handleClick}
      />
      {selectedTarget && (
        <group position={selectedTarget.position}>
          {/* Pulsing outer glow */}
          <mesh>
            <sphereGeometry args={[0.05, 32, 32]} />
            <meshBasicMaterial
              color="#ff0000"
              transparent
              opacity={0.3}
              blending={2}
            />
          </mesh>

          {/* Main target ring - aligned to surface */}
          <mesh>
            <ringGeometry args={[0.03, 0.044, 32]} />
            <meshBasicMaterial
              color="#ff0000"
              transparent
              opacity={0.9}
              side={2}
            />
          </mesh>

          {/* Inner precision ring */}
          <mesh>
            <ringGeometry args={[0.016, 0.024, 32]} />
            <meshBasicMaterial
              color="#ff3333"
              transparent
              opacity={1}
              side={2}
            />
          </mesh>

          {/* Center dot */}
          <mesh>
            <sphereGeometry args={[0.008, 16, 16]} />
            <meshBasicMaterial color="#ff0000" />
          </mesh>

          {/* Glowing point light at center */}
          <pointLight
            color="#ff0000"
            intensity={0.5}
            distance={0.1}
          />
        </group>
      )}
    </group>
  );
}

export default Earth;
